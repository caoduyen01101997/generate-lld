{"ast":null,"code":"var _jsxFileName = \"/Users/caoduyen/Desktop/source-code/generate-lld/src/GenTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JsonTable = () => {\n  _s();\n  const [jsonData, setJsonData] = useState('');\n  const [tableData, setTableData] = useState([]);\n  const [copiedData, setCopiedData] = useState('');\n\n  // const parseJson = () => {\n  //   try {\n  //     const parsedData = JSON.parse(jsonData);\n  //     const tableRows = Object.entries(parsedData).map(([key, value], index) => ({\n  //       stt: index + 1,\n  //       attribute: key,\n  //       dataType: typeof value,\n  //       description: '',\n  //       required: 'N',\n  //     }));\n  //     setTableData(tableRows);\n  //   } catch (error) {\n  //     console.error('Invalid JSON format', error);\n  //     setTableData([]);\n  //   }\n  // };\n\n  const parseJson = async () => {\n    try {\n      const parsedData = JSON.parse(jsonData);\n      // const tableRows = Object.entries(parsedData).map(([key, value], index) => ({\n      //   stt: index + 1,\n      //   attribute: key,\n      //   dataType: typeof value,\n      //   description: '',\n      //   required: 'N',\n      // }));\n      var tableRows = [];\n      parseJson2(\"\", parsedData, tableRows);\n      setTableData(tableRows);\n    } catch (error) {\n      console.error('Invalid JSON format', error);\n      setTableData([]);\n    }\n  };\n  const parseJson2 = (prefix, json, tableRows) => {\n    for (var key in json) {\n      if (Array.isArray(json[key])) {\n        json[key] = json[key][0];\n      }\n      if (typeof json[key] == \"object\") {\n        const prefixTruyenvao = prefix + key + \".\";\n        const subJson = JSON.parse(JSON.stringify(json[key]));\n        parseJson2(prefixTruyenvao, subJson, tableRows);\n      } else {\n        tableRows.push({\n          stt: tableRows.length,\n          attribute: prefix + key,\n          dataType: typeof json[key],\n          description: '',\n          required: 'N'\n        });\n      }\n    }\n  };\n  const copyToClipboard = () => {\n    const tableContent = tableData.map(row => `${row.attribute}\\t${row.dataType}\\t${row.description}\\t${row.required}\\n`);\n    const clipboardData = tableContent.join('');\n\n    // Create a textarea element, set its value to clipboardData, and trigger a copy\n    const textarea = document.createElement('textarea');\n    textarea.value = clipboardData;\n    document.body.appendChild(textarea);\n    textarea.select();\n    document.execCommand('copy');\n    document.body.removeChild(textarea);\n    setCopiedData(clipboardData);\n    alert('Table data copied to clipboard!');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"5\",\n      cols: \"50\",\n      value: jsonData,\n      onChange: e => setJsonData(e.target.value),\n      placeholder: \"Enter JSON here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: parseJson,\n      children: \"Generate Table\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: copyToClipboard,\n      children: \"Copy to Clipboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"STT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Attribute\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Data Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Required\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableData.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.stt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.attribute\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.dataType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: row.description,\n              onChange: e => {\n                const updatedData = [...tableData];\n                updatedData.find(item => item.attribute === row.attribute).description = e.target.value;\n                setTableData(updatedData);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.required\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)]\n        }, row.attribute, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), copiedData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Copied Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: copiedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(JsonTable, \"TMa6kEIFp3zQtDDJYizH3cDrOsQ=\");\n_c = JsonTable;\nexport default JsonTable;\nvar _c;\n$RefreshReg$(_c, \"JsonTable\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","JsonTable","_s","jsonData","setJsonData","tableData","setTableData","copiedData","setCopiedData","parseJson","parsedData","JSON","parse","tableRows","parseJson2","error","console","prefix","json","key","Array","isArray","prefixTruyenvao","subJson","stringify","push","stt","length","attribute","dataType","description","required","copyToClipboard","tableContent","map","row","clipboardData","join","textarea","document","createElement","value","body","appendChild","select","execCommand","removeChild","alert","children","rows","cols","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","border","type","updatedData","find","item","_c","$RefreshReg$"],"sources":["/Users/caoduyen/Desktop/source-code/generate-lld/src/GenTable.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst JsonTable = () => {\r\n  const [jsonData, setJsonData] = useState('');\r\n  const [tableData, setTableData] = useState([]);\r\n  const [copiedData, setCopiedData] = useState('');\r\n\r\n  // const parseJson = () => {\r\n  //   try {\r\n  //     const parsedData = JSON.parse(jsonData);\r\n  //     const tableRows = Object.entries(parsedData).map(([key, value], index) => ({\r\n  //       stt: index + 1,\r\n  //       attribute: key,\r\n  //       dataType: typeof value,\r\n  //       description: '',\r\n  //       required: 'N',\r\n  //     }));\r\n  //     setTableData(tableRows);\r\n  //   } catch (error) {\r\n  //     console.error('Invalid JSON format', error);\r\n  //     setTableData([]);\r\n  //   }\r\n  // };\r\n  \r\n\r\n  const parseJson = async () => {\r\n    try {\r\n      const parsedData = JSON.parse(jsonData);\r\n      // const tableRows = Object.entries(parsedData).map(([key, value], index) => ({\r\n      //   stt: index + 1,\r\n      //   attribute: key,\r\n      //   dataType: typeof value,\r\n      //   description: '',\r\n      //   required: 'N',\r\n      // }));\r\n      var tableRows = []\r\n      parseJson2(\"\",parsedData,tableRows)\r\n      setTableData(tableRows);\r\n    } catch (error) {\r\n      console.error('Invalid JSON format', error);\r\n      setTableData([]);\r\n    }\r\n  };\r\n\r\n\r\n  const parseJson2 = (prefix, json, tableRows) =>{\r\n    for (var key in json) {\r\n      if(Array.isArray(json[key])){\r\n        json[key] = json[key][0]\r\n      }\r\n      if(typeof json[key] == \"object\"){\r\n        const prefixTruyenvao =  prefix + key +\".\"\r\n        const subJson = JSON.parse(JSON.stringify(json[key]));\r\n        parseJson2(prefixTruyenvao, subJson, tableRows)\r\n      }else{\r\n        tableRows.push({\r\n          stt: tableRows.length,\r\n          attribute: prefix + key,\r\n          dataType: typeof json[key],\r\n          description: '',\r\n          required: 'N',\r\n        })\r\n      }\r\n      \r\n  }\r\n  }\r\n\r\n  const copyToClipboard = () => {\r\n    const tableContent = tableData.map(\r\n      (row) => `${row.attribute}\\t${row.dataType}\\t${row.description}\\t${row.required}\\n`\r\n    );\r\n\r\n    const clipboardData = tableContent.join('');\r\n    \r\n    // Create a textarea element, set its value to clipboardData, and trigger a copy\r\n    const textarea = document.createElement('textarea');\r\n    textarea.value = clipboardData;\r\n    document.body.appendChild(textarea);\r\n    textarea.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(textarea);\r\n\r\n    setCopiedData(clipboardData);\r\n    alert('Table data copied to clipboard!');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <textarea\r\n        rows=\"5\"\r\n        cols=\"50\"\r\n        value={jsonData}\r\n        onChange={(e) => setJsonData(e.target.value)}\r\n        placeholder=\"Enter JSON here\"\r\n      />\r\n      <br />\r\n      <button onClick={parseJson}>Generate Table</button>\r\n      <button onClick={copyToClipboard}>Copy to Clipboard</button>\r\n\r\n      <table border=\"1\">\r\n        <thead>\r\n          <tr>\r\n            <th>STT</th>\r\n            <th>Attribute</th>\r\n            <th>Data Type</th>\r\n            <th>Description</th>\r\n            <th>Required</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {tableData.map((row) => (\r\n            <tr key={row.attribute}>\r\n              <td>{row.stt}</td>\r\n              <td>{row.attribute}</td>\r\n              <td>{row.dataType}</td>\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  value={row.description}\r\n                  onChange={(e) => {\r\n                    const updatedData = [...tableData];\r\n                    updatedData.find((item) => item.attribute === row.attribute).description =\r\n                      e.target.value;\r\n                    setTableData(updatedData);\r\n                  }}\r\n                />\r\n              </td>\r\n              <td>{row.required}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      {copiedData && (\r\n        <div>\r\n          <h3>Copied Data:</h3>\r\n          <pre>{copiedData}</pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JsonTable;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}